package buscamascotas.IU;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

/**
 *
 * @author Alberto
 */
public class Historial extends javax.swing.JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = -2573385531129051606L;
	static Object[] valores;
	private String ruta, rutaFinal, rutaFichero;
	private int numeroDeFicheros;

	public int getNumeroDeFicheros() {
		return numeroDeFicheros;
	}

	public void setNumeroDeFicheros(int numeroDeFicheros) {
		this.numeroDeFicheros = numeroDeFicheros;
	}

	public String getRuta() {
		return ruta;
	}

	public void setRuta(String ruta) {
		this.ruta = ruta;
	}

	public String getRutaFinal() {
		return rutaFinal;
	}

	public void setRutaFinal(String rutaFinal) {
		this.rutaFinal = rutaFinal;
	}

	public String getRutaFichero() {
		return rutaFichero;
	}

	public void setRutaFichero(String rutaFichero) {
		this.rutaFichero = rutaFichero;
	}

	/**
	 * Creates new form Historial
	 */
	@SuppressWarnings("unchecked")
	public Historial() throws FileNotFoundException, IOException {
		ArrayList<String> files = new ArrayList<>();

		String separador = System.getProperty("file.separator");

		initComponents();

		salir();

		setRutaFinal(calcularRuta(valores[5].toString(), valores[6].toString(),
				valores[14].toString()) + separador);

		files = listarFicheros(rutaFinal);

		setNumeroDeFicheros(files.size());

		if (getNumeroDeFicheros() == 0) {
			historialCombo.removeAllItems();

			historialCombo.removeAllItems();
			historialCombo.addItem("Nuevo...");
			historialLabel.setText("HISTORIAL DE "
					+ valores[1].toString().toUpperCase());

			setRutaFichero(ruta + separador);

		} else {

			historialLabel.setText("HISTORIAL DE "
					+ valores[1].toString().toUpperCase());

			String ultimoS = (files.get(getNumeroDeFicheros() - 1).toString());

			setRutaFichero(ruta + separador + ultimoS);

			File archivo = new File(getRutaFichero());

			leerFichero(archivo);
			historialCombo.removeAllItems();

			rellenarCombo(files);

			historialCombo.setSelectedIndex(getNumeroDeFicheros());
			historialLabel.setText("HISTORIAL DE "
					+ valores[1].toString().toUpperCase());
		}

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		historialText = new javax.swing.JTextArea();
		historialLabel = new javax.swing.JLabel();
		historialCombo = new javax.swing.JComboBox();
		jLabel1 = new javax.swing.JLabel();
		menuButton = new javax.swing.JButton();
		salirButton = new javax.swing.JButton();
		jLabel2 = new javax.swing.JLabel();
		guardarButton = new javax.swing.JButton();
		jButton1 = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setResizable(false);

		historialText.setColumns(20);
		historialText.setRows(5);
		jScrollPane1.setViewportView(historialText);

		historialLabel.setFont(new java.awt.Font("Tahoma", 0, 24));
		historialLabel.setText("HISTORIAL DE");

		historialCombo.setModel(new javax.swing.DefaultComboBoxModel(
				new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		historialCombo.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				historialComboItemStateChanged(evt);
			}
		});
		historialCombo.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				historialComboActionPerformed(evt);
			}
		});

		jLabel1.setText("SELECCIONA OTRO HISTORIAL");

		menuButton.setText("MENU PRINCIPAL");
		menuButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				menuButtonActionPerformed(evt);
			}
		});

		salirButton.setText("SALIR");
		salirButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				salirButtonActionPerformed(evt);
			}
		});

		jLabel2.setFont(new java.awt.Font("Rockwell Extra Bold", 1, 36));
		jLabel2.setText("BUSCAMASCOTAS");

		guardarButton.setText("GUARDAR");
		guardarButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				guardarButtonActionPerformed(evt);
			}
		});

		jButton1.setText("ELIMINAR");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addGroup(
														layout.createSequentialGroup()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addGroup(
																						layout.createSequentialGroup()
																								.addComponent(
																										jLabel2)
																								.addGap(18,
																										18,
																										18)
																								.addComponent(
																										historialLabel,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										javax.swing.GroupLayout.DEFAULT_SIZE,
																										Short.MAX_VALUE))
																				.addGroup(
																						javax.swing.GroupLayout.Alignment.TRAILING,
																						layout.createSequentialGroup()
																								.addGap(0,
																										55,
																										Short.MAX_VALUE)
																								.addComponent(
																										jScrollPane1,
																										javax.swing.GroupLayout.PREFERRED_SIZE,
																										669,
																										javax.swing.GroupLayout.PREFERRED_SIZE)))
																.addGap(60, 60,
																		60))
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		jLabel1)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(
																		historialCombo,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																		javax.swing.GroupLayout.DEFAULT_SIZE,
																		Short.MAX_VALUE)
																.addComponent(
																		jButton1)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(
																		guardarButton)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(
																		menuButton)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(
																		salirButton)
																.addContainerGap()))));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGap(13, 13, 13)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(jLabel2)
												.addComponent(historialLabel))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jScrollPane1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										578,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(18, 18, 18)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(
														historialCombo,
														javax.swing.GroupLayout.PREFERRED_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(menuButton)
												.addComponent(salirButton)
												.addComponent(guardarButton)
												.addComponent(jLabel1)
												.addComponent(jButton1))
								.addGap(12, 12, 12)));

		pack();
		setLocationRelativeTo(null);
	}

	private void menuButtonActionPerformed(java.awt.event.ActionEvent evt) {
		MenuPrincipal.main();
		this.setVisible(false);
	}

	private void salirButtonActionPerformed(java.awt.event.ActionEvent evt) {
		int eleccion = JOptionPane.showConfirmDialog(null, "¿Desea salir?");

		if (eleccion == 0) {
			JOptionPane.showMessageDialog(null, "Saliendo del sistema");
			System.exit(0);
		}
	}

	private void historialComboActionPerformed(java.awt.event.ActionEvent evt) {

	}

	private void guardarButtonActionPerformed(java.awt.event.ActionEvent evt) {
		PopUpWindow hola = new PopUpWindow(this, rootPaneCheckingEnabled);
		String textoLabel;

		textoLabel = "¿DESEA GUARDAR EL HISTORIAL?";

		hola.setLabelPopup(textoLabel);
		hola.setVisible(true);

		ArrayList<String> files = new ArrayList<>();
		File data = new File(getRutaFichero());

		String select = historialCombo.getSelectedItem().toString();

		if (hola.getReturnStatus() == 1) {
			if (select.equals("Nuevo...")) {
				try {
					crearFichero(getRutaFinal());
				} catch (IOException ex) {
					Logger.getLogger(Historial.class.getName()).log(
							Level.SEVERE, null, ex);
				}
			} else {
				if (data.exists()) {

					try {

						modificarFichero(getRutaFichero());
					} catch (IOException ex) {
						Logger.getLogger(Historial.class.getName()).log(
								Level.SEVERE, null, ex);
					}

				} else {

					try {
						crearFichero(getRutaFinal());
					} catch (IOException ex) {
						Logger.getLogger(Historial.class.getName()).log(
								Level.SEVERE, null, ex);
					}
				}
			}
		}
		files = listarFicheros(rutaFinal);
		historialCombo.removeAllItems();
		rellenarCombo(files);
		setNumeroDeFicheros(files.size());
		historialCombo.setSelectedIndex(getNumeroDeFicheros());
	}

	private void historialComboItemStateChanged(java.awt.event.ItemEvent evt) {
		Object selectItem = historialCombo.getSelectedItem();

		if (selectItem != null) {
			String elemento = selectItem.toString();

			if (elemento.equals("Nuevo...")) {
				historialText.setText("");
				setRutaFichero(getRutaFinal());
			} else {
				setRutaFichero(getRutaFinal() + elemento);

				File archivo = new File(getRutaFichero());
				try {
					leerFichero(archivo);
				} catch (FileNotFoundException ex) {
					Logger.getLogger(Historial.class.getName()).log(
							Level.SEVERE, null, ex);
				} catch (IOException ex) {
					Logger.getLogger(Historial.class.getName()).log(
							Level.SEVERE, null, ex);
				}
			}
		}
	}

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
		PopUpWindow hola = new PopUpWindow(this, rootPaneCheckingEnabled);
		String textoLabel;

		textoLabel = "¿DESEA ELIMINAR EL HISTORIAL?";

		hola.setLabelPopup(textoLabel);

		Object selectItem = historialCombo.getSelectedItem();
		if (selectItem != null) {
			String elemento = selectItem.toString();
			hola.setVisible(true);
			if (hola.getReturnStatus() == 1) {

				if (elemento.equals("Nuevo...")) {
					historialText.setText("");
				} else {
					String ruta = getRutaFinal() + "\\" + elemento;
					File f = new File(ruta);
					f.delete();
					ArrayList<String> file = listarFicheros(getRutaFinal());
					historialCombo.removeAllItems();
					rellenarCombo(file);
					setNumeroDeFicheros(file.size());
					historialCombo.setSelectedIndex(getNumeroDeFicheros());
				}
			}
		}
	}

	public String calcularRuta(String especie, String raza, String carpeta) {
		ruta = System.getProperty("user.dir");

		String separador = System.getProperty("file.separator");
		especie = especie.toUpperCase();
		raza = raza.toUpperCase();
		carpeta = carpeta.toUpperCase();

		ruta = ruta + separador + especie + separador + raza + separador
				+ carpeta;
		return ruta;
	}

	public void numeroDeFicheros(String path) {
		ArrayList<String> dev = listarFicheros(path);
		setNumeroDeFicheros(dev.size());
	}

	public ArrayList<String> listarFicheros(String path) {

		ArrayList<String> lista = new ArrayList<>();

		File[] archivos;
		File directorio = new File(path);

		archivos = directorio.listFiles();

		for (File file : archivos) {
			lista.add(file.getName().toString());
		}

		setNumeroDeFicheros(lista.size());

		return lista;
	}

	@SuppressWarnings("unchecked")
	public void rellenarCombo(ArrayList<String> ficheros) {

		historialCombo.addItem("Nuevo...");
		for (int i = 0; i < getNumeroDeFicheros(); i++) {

			historialCombo.addItem(ficheros.get(i));
		}

	}

	public void modificarFichero(String s) throws IOException {
		File f = new File(s);
		f.delete();
		if (f.exists()) {
		} else {
			f.createNewFile();
		}

		BufferedWriter bw = new BufferedWriter(new FileWriter(f));
		String texto = historialText.getText();
		String[] lineas = texto.split("\n");

		for (int i = 0; i < lineas.length; i++) {
			bw.write(lineas[i].toString());
			bw.newLine();
		}

		bw.close();
	}

	public void crearFichero(String path) throws IOException {
		Calendar c = new GregorianCalendar();
		String dia, mes, annio, fecha;

		dia = Integer.toString(c.get(Calendar.DATE));
		mes = Integer.toString(c.get(Calendar.MONTH) + 1);
		annio = Integer.toString(c.get(Calendar.YEAR));

		numeroDeFicheros(getRutaFinal());
		fecha = annio + "-" + mes + "-" + dia;

		path = path + fecha;

		File archivo;
		archivo = new File(path);

		if (archivo.exists()) {
			ArrayList<String> lista = new ArrayList<>();
			lista = listarFicheros(getRutaFinal());

			int cont = 1;
			int iguales = 0;
			boolean normal = false;

			for (int i = 0; i < getNumeroDeFicheros(); i++) {
				// if (i == 0) {

				if (normal) {
					String comp = fecha;
					comp = comp + " " + cont;
					cont++;
					if (lista.get(i).equals(comp)) {
						iguales++;
					}
				}
				if (lista.get(i).equals(fecha)) {

					iguales++;
					normal = true;
				}
			}
			path = path + " " + iguales;
			archivo = new File(path);
		}
		try {
			// A partir del objeto File creamos el fichero físicamente
			if (archivo.createNewFile()) {
				setNumeroDeFicheros(getNumeroDeFicheros() + 1);
			} else {
			}
		} catch (IOException ioe) {
			ioe.printStackTrace();
		}

		BufferedWriter bw = new BufferedWriter(new FileWriter(archivo));
		String texto = historialText.getText();
		String[] lineas = texto.split("\n");

		for (int i = 0; i < lineas.length; i++) {
			bw.write(lineas[i].toString());
			bw.newLine();
		}

		bw.close();

	}

	public void leerFichero(File f) throws UnsupportedEncodingException,
			FileNotFoundException, IOException {
		if (f.exists()) {
			StringBuffer texto = new StringBuffer();
			String c;
			BufferedReader in = new BufferedReader(new InputStreamReader(
					new FileInputStream(f), "UTF-8"));
			while ((c = in.readLine()) != null) {
				texto.append(c);
				texto.append("\n");
			}
			in.close();
			historialText.setText(texto.toString());
		}
	}

	public void salir() {
		setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent we) {

				int devolucion = JOptionPane.showConfirmDialog(null,
						"¿ESTA USTED SEGURO DE QUE DESEA SALIR?");
				if (devolucion == 0) {
					// TODO agregar subida de datos a dropbox. COPIA DE
					// SEGURIDAD.
					System.exit(0);
				}

			}
		});
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(final Object[] datos) {
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Historial.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Historial.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Historial.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Historial.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		}
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				valores = datos;
				try {
					new Historial().setVisible(true);
				} catch (IOException ex) {
					Logger.getLogger(Historial.class.getName()).log(
							Level.SEVERE, null, ex);
				}
			}
		});
	}

	// Declaración de variables
	private javax.swing.JButton guardarButton;
	@SuppressWarnings("rawtypes")
	private javax.swing.JComboBox historialCombo;
	private javax.swing.JLabel historialLabel;
	private javax.swing.JTextArea historialText;
	private javax.swing.JButton jButton1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JButton menuButton;
	private javax.swing.JButton salirButton;
}
